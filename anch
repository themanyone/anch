#!/bin/bash
#set -x
: ${1?"Usage: `basename $0` [compiler] [options] file..."}
ax=($@)
# assume first file that exists is input source code
for x in "${ax[@]}"; do
    if [[ -f "$x" ]]; then in="$x"; fi
done
# search function echos position in array or nothing
pos() {
    c=0
    local hay needle=$1
    shift
    for hay; do
        if [[ $hay == $needle ]]; then echo $c; return 0;fi
    ((c++))
    done; return 1
}
run=$(pos "-run" $@)
end=$(pos $in $@)
#integration with tcc -run [args]
if [[ "$run" && "$end" ]]; then
    cflags=${ax[@]:0:$run}
    args=${ax[@]:$run+1:$end-$run-1}
    args+=" "${ax[@]:$end+1}
    gcc='tcc '
    run='-run '
# if not tcc, assume $1 is compiler to use
elif [[ "$in" ]]; then
    opt=$(pos "-o" $@)
    gcc=$1
    args+=${ax[@]:$opt}
    cflags=${ax[@]:1:$(pos $in $@)-1}
else
    if [[ -z $(pos "tcc" $@) ]]; then
# who knows? maybe it came from a pipe
        gcc='tcc '
    fi
        anchor -qp | $gcc "$@"
    exit 0
fi
src="${in##./}"
tmp=".${src%.*}.c"

# precompile and dump contents into temp file
# get rid of shebang if not tcc compiler
s=($(<$in)[0])
if [[ $gcc != "tcc " && ${s:0:2} == "#!" ]]; then
    anchor -qp "$in" | tail -n +2 > $tmp
else
    anchor -qp "$in" > "$tmp"
fi

# compile the temp file with options. remove if successful
$gcc ${cflags[@]} $run $tmp ${args[@]}&&rm "$tmp"
# if build fails, tmp file remains for debugging
