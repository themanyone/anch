#!/bin/bash
#set -x
: ${1?"Usage: `basename $0` [compiler] [options] file..."}
#integration with tcc -run [args]
if [[ "${1:0:4}" == -run ]]; then
    gcc="tcc"
else
	#create tmp file and invoke other compiler
	gcc=$1
	shift
fi
ax=($@);c=0;nofile=1
# expects a command line like -fPIC -m32 foo.c -o foo
# cxx is first argument without a "-" (is foo.c)
for x in $@; do
    # "-" by itself is a signal to pipe stdin on through
    if [[ $x == - ]]; then
	anchor | $gcc $(eval echo ${ax[@]}) 
	exit 0
    fi
    # skip any target following the "-o" option
    if [[ $x == -o ]]; then ((c++))
    # otherwise look for a valid file to compile=cxx
    elif [[ -f $x && $nofile == 1 ]]; then
        cxx=${ax[$c]#./} #cxx=foo.c
        replace=$c
        nofile=0
    fi
    ((c++))
done
if [[ $nofile == 1 ]]; then
    echo `basename $0` ERROR: No input file!
    #exit $nofile
fi

# make a tmp file with same extension as blah.c
tmp=$(mktemp -p ./ -u).${cxx##*.}

# replace blah.c in the command line with temp file
ax[$replace]=$tmp

# precompile and dump contents into temp file
anchor $cxx > $tmp

# compile the temp file with options. remove if successful
$gcc $(eval echo ${ax[@]}) && rm $tmp
# if build fails, tmp file remains for debugging
